// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for TaskPriority.
const (
	TaskPriorityHigh   TaskPriority = "High"
	TaskPriorityLow    TaskPriority = "Low"
	TaskPriorityMiddle TaskPriority = "Middle"
)

// Defines values for TaskStatus.
const (
	TaskStatusCompleted  TaskStatus = "Completed"
	TaskStatusInProgress TaskStatus = "InProgress"
	TaskStatusNotStarted TaskStatus = "NotStarted"
)

// Defines values for TaskInputPriority.
const (
	TaskInputPriorityHigh   TaskInputPriority = "High"
	TaskInputPriorityLow    TaskInputPriority = "Low"
	TaskInputPriorityMiddle TaskInputPriority = "Middle"
)

// Defines values for TaskInputStatus.
const (
	TaskInputStatusCompleted  TaskInputStatus = "Completed"
	TaskInputStatusInProgress TaskInputStatus = "InProgress"
	TaskInputStatusNotStarted TaskInputStatus = "NotStarted"
)

// Defines values for GetTasksParamsStatus.
const (
	Completed  GetTasksParamsStatus = "Completed"
	InProgress GetTasksParamsStatus = "InProgress"
	NotStarted GetTasksParamsStatus = "NotStarted"
)

// Defines values for GetTasksParamsSort.
const (
	EndDate  GetTasksParamsSort = "end_date"
	Priority GetTasksParamsSort = "priority"
)

// Task defines model for Task.

// type Task struct {
// 	CreatedAt   *time.Time    `json:"created_at,omitempty"`
// 	Description *string       `json:"description,omitempty"`
// 	EndDate     *time.Time    `json:"end_date,omitempty"`
// 	Id          *int          `json:"id,omitempty"`
// 	Name        *string       `json:"name,omitempty"`
// 	Priority    *TaskPriority `json:"priority,omitempty"`
// 	StartDate   *time.Time    `json:"start_date,omitempty"`
// 	Status      *TaskStatus   `json:"status,omitempty"`
// 	UpdatedAt   *time.Time    `json:"updated_at,omitempty"`
// }

type Task struct {
    CreatedAt   *time.Time    `json:"created_at,omitempty" db:"created_at"`
    Description *string       `json:"description,omitempty" db:"description"`
    EndDate     *time.Time    `json:"end_date,omitempty" db:"end_date"`
    Id          *int          `json:"id,omitempty" db:"id"`
    Name        *string       `json:"name,omitempty" db:"name"`
    Priority    *TaskPriority `json:"priority,omitempty" db:"priority"`
    StartDate   *time.Time    `json:"start_date,omitempty" db:"start_date"`
    Status      *TaskStatus   `json:"status,omitempty" db:"status"`
    UpdatedAt   *time.Time    `json:"updated_at,omitempty" db:"updated_at"`
}


// TaskPriority defines model for Task.Priority.
type TaskPriority string

// TaskStatus defines model for Task.Status.
type TaskStatus string

// TaskInput defines model for TaskInput.
type TaskInput struct {
	Description *string            `json:"description,omitempty"`
	EndDate     *time.Time         `json:"end_date,omitempty"`
	Name        *string            `json:"name,omitempty"`
	Priority    *TaskInputPriority `json:"priority,omitempty"`
	StartDate   *time.Time         `json:"start_date,omitempty"`
	Status      *TaskInputStatus   `json:"status,omitempty"`
}

// TaskInputPriority defines model for TaskInput.Priority.
type TaskInputPriority string

// TaskInputStatus defines model for TaskInput.Status.
type TaskInputStatus string

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	Status      *GetTasksParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Name        *string               `form:"name,omitempty" json:"name,omitempty"`
	Description *string               `form:"description,omitempty" json:"description,omitempty"`
	Page        *int                  `form:"page,omitempty" json:"page,omitempty"`
	Sort        *GetTasksParamsSort   `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetTasksParamsStatus defines parameters for GetTasks.
type GetTasksParamsStatus string

// GetTasksParamsSort defines parameters for GetTasks.
type GetTasksParamsSort string

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = TaskInput

// PutTasksIdJSONRequestBody defines body for PutTasksId for application/json ContentType.
type PutTasksIdJSONRequestBody = TaskInput

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xUTW8TMRD9K9XAcUm2lNPe+JAgEkWV6K2qKhNPtm6ztmvPgqIoEuRUeqHqoQiBxAWB",
	"uEAleoAD8GPShPIvkL1tNmG3TVuFHjit1x7P+M17b9pQV4lWEiVZiNpg66uYML9cZHbdfbVRGg0J9Lt1",
	"g4yQrzByfw1lErcCzgivkUgQAqCWRojAkhEyhk4AHG3dCE1CSXepcI6Sr7gEZ88o+EgiIQljNG5fsgRL",
	"S2gjlBHUcoco0wSiJbgn4lUIYF5w3nRV7qsnsFxSzBIzdM4HWmKU2tFqDxQ9dImQQwA1uWBUbNBaCOC2",
	"SnQT3UFZ9VTzcza8M9xRj9awTi6LI7MmdUpFRqfPzn/HQrGjbkvIhvIwBTXdmevxzDyTLMYEJc3cXKhB",
	"AI/RWN9amK2EldA9S2mUTAuIYK4SVuYgAM1o1b+zSsyu+1WMnivHFHPc1DhEcBdp0Qe4K4YlSGgsREtt",
	"EK7CRoqmBccEHMMPjlw9jT6UF/Kf0TJnvDcqvQtc1yweL8uxwdImQTQbFIbDSUmsMlTaoqFYRyxQ0pLl",
	"AAxaraTN7HQ9DP2cVJJQegqZ1k1R9yRW12zmsrzcuBmH9AvCxC+uGmxABFeq+aCuHk3pqh/RuTiZMazl",
	"/xWxZtmELBfy2ASAweZ2f+utj7VpkjDTggh63Z+97rde93Pv2aeDr08P33/odXf6L3b7P156YytbotYF",
	"ZYdyNbiRoqVbirfO1Z5J8LOh1vE4/uJhtjDdchgH398MNrcnQO3uZGE+IHNmtS14J8vrTFLEfMfve9Q1",
	"foJNndtzAQp+1B5hkENEJsUSL+QUFgV34xSg/edbv1+9mwg0C3NUnjp3Lg1SOFWRXEjmhx+//NrfG5d5",
	"Wqby9N/35tK9E54iqcHr/cHu3kRJZWE+/Z8AAAD//99yTzdmCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
