// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for TaskPriority.
const (
	TaskPriorityHigh   TaskPriority = "High"
	TaskPriorityLow    TaskPriority = "Low"
	TaskPriorityMiddle TaskPriority = "Middle"
)

// Defines values for TaskStatus.
const (
	TaskStatusCompleted  TaskStatus = "Completed"
	TaskStatusInProgress TaskStatus = "InProgress"
	TaskStatusNotStarted TaskStatus = "NotStarted"
)

// Defines values for TaskInputPriority.
const (
	TaskInputPriorityHigh   TaskInputPriority = "High"
	TaskInputPriorityLow    TaskInputPriority = "Low"
	TaskInputPriorityMiddle TaskInputPriority = "Middle"
)

// Defines values for TaskInputStatus.
const (
	TaskInputStatusCompleted  TaskInputStatus = "Completed"
	TaskInputStatusInProgress TaskInputStatus = "InProgress"
	TaskInputStatusNotStarted TaskInputStatus = "NotStarted"
)

// Defines values for GetTasksParamsStatus.
const (
	Completed  GetTasksParamsStatus = "Completed"
	InProgress GetTasksParamsStatus = "InProgress"
	NotStarted GetTasksParamsStatus = "NotStarted"
)

// Defines values for GetTasksParamsSort.
const (
	EndDate  GetTasksParamsSort = "end_date"
	Priority GetTasksParamsSort = "priority"
)

// Label defines model for Label.
type Label struct {
	ID        int       `json:"id" db:"id"`
	Name      string    `json:"name" db:"name"`
	Color     string    `json:"color" db:"color"`
	CreatedAt time.Time `json:"created_at" db:"created_at"`
	UpdatedAt time.Time `json:"updated_at" db:"updated_at"`
}

// LabelInput defines model for LabelInput.
type LabelInput struct {
	Name  string `json:"name" db:"name"`
	Color string `json:"color" db:"color"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt   *time.Time    `json:"created_at,omitempty"`
	Description *string       `json:"description,omitempty"`
	EndDate     *time.Time    `json:"end_date,omitempty"`
	Id          *int          `json:"id,omitempty"`
	Labels      []Label       `json:"labels" db:"-"` // DBには直接対応しない
	Name        *string       `json:"name,omitempty"`
	Priority    *TaskPriority `json:"priority,omitempty"`
	StartDate   *time.Time    `json:"start_date,omitempty"`
	Status      *TaskStatus   `json:"status,omitempty"`
	UpdatedAt   *time.Time    `json:"updated_at,omitempty"`
}

// TaskPriority defines model for Task.Priority.
type TaskPriority string

// TaskStatus defines model for Task.Status.
type TaskStatus string

// TaskInput defines model for TaskInput.
type TaskInput struct {
	Description *string            `json:"description,omitempty"`
	EndDate     *time.Time         `json:"end_date,omitempty"`
	Name        *string            `json:"name,omitempty"`
	Priority    *TaskInputPriority `json:"priority,omitempty"`
	StartDate   *time.Time         `json:"start_date,omitempty"`
	Status      *TaskInputStatus   `json:"status,omitempty"`
}

// TaskInputPriority defines model for TaskInput.Priority.
type TaskInputPriority string

// TaskInputStatus defines model for TaskInput.Status.
type TaskInputStatus string

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	Status      *GetTasksParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Name        *string               `form:"name,omitempty" json:"name,omitempty"`
	Description *string               `form:"description,omitempty" json:"description,omitempty"`
	Page        *int                  `form:"page,omitempty" json:"page,omitempty"`
	Sort        *GetTasksParamsSort   `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetTasksParamsStatus defines parameters for GetTasks.
type GetTasksParamsStatus string

// GetTasksParamsSort defines parameters for GetTasks.
type GetTasksParamsSort string

// PutTasksIdLabelsJSONBody defines parameters for PutTasksIdLabels.
type PutTasksIdLabelsJSONBody struct {
	LabelIds *[]int `json:"label_ids,omitempty"`
}

// PostLabelsJSONRequestBody defines body for PostLabels for application/json ContentType.
type PostLabelsJSONRequestBody = LabelInput

// PutLabelsIdJSONRequestBody defines body for PutLabelsId for application/json ContentType.
type PutLabelsIdJSONRequestBody = LabelInput

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = TaskInput

// PutTasksIdJSONRequestBody defines body for PutTasksId for application/json ContentType.
type PutTasksIdJSONRequestBody = TaskInput

// PutTasksIdLabelsJSONRequestBody defines body for PutTasksIdLabels for application/json ContentType.
type PutTasksIdLabelsJSONRequestBody PutTasksIdLabelsJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXUW8bRRD+K9XA4xFfKE/3BlQCSymKRN+qKNr6Js62d7ub3TmQFZ1UO0i0VSVKH1IK",
	"SJEAgapKIRJ9ACHgx1xsmn+Bds+xz7mNHSdOkPq22tvdmfnmm/nmtqElUyUFCjIQbYNpbWLK3HKF3cHE",
	"LpSWCjVxdNstmUhtF9RRCBEY0ly0IQ+gpZERxuuM7OcNqVO7gpgRvkM8RQjqd3hceYoLwjZquy9Yil4j",
	"mYrnNJKPduSdu9gi+4qLrSlURvMEeIpTeQAatzKuMYbodnkqGD6z5jF+i5l7HrPnQC9G09JcEZfC6zCK",
	"eN0+cPF8JBYw5ycnTN3ibY0bEMFbjTGDGkP6NErujJFnWrPO1LwqzaXm1LEfUWSpRfJj3t6EAG7yOE6s",
	"tyvy8wqg47uGmKY5AzXEKDNVa59I+tQ+hDEE0BSrWrY1GgMBfChTlaD94LO+GEZaUpxCyMVn+Y3LQh1R",
	"u8XFhnRhckrsN4vxtZtMsDamKOja+6tNCOAz1MZBC8tL4VJo3ZIKBVMcIri+FC5dhwAUo03nZ2NcCW10",
	"ybKpYjY5zRgi+AhppTxhu4JRUpgyi++GYdldBKFwF5lSCW+5q427pkxuWUB1Diym/vwwTfALBg+e9B/t",
	"ubMmS1OmOxBBsfOi2Hle7Lw8/P3+659/KXpP+1/t9v9+5jgjjQeHVWmqQGxlaOgDGXfmwmBmiGXF5JMt",
	"mHSGeQ395VopweFf3w8ePPEGPNg9KLrPiu4Xo8iL3tPyvDs5pEFjm8d5+bClZh2GG26/BKIZ1znxXt2r",
	"/sNHR89/8nv1+Mv+/rfOsb3mjaK7X/WuvGczMp2YPjfCxablzLyaHtCYYkyzFAm1gej2NnD7nq1IOG5l",
	"VrdOUiCoeHxS0PK1AIa99gRts0mU/n/ehnWGDL57Ndg9mB/Q8l7JX2Lm3tQudssd8GO/laHujMEfdvEq",
	"4Bdt535Dw9GqltdZ96rwneO6Yu1JszFusCwhiJaDOrVOecRITV6IRppbUXIPJGsL1ZNR+s8kJ25i9Uxz",
	"JIkl3vo6t9D0/il6fxS9X4vu/lxac0zXyyjZ8WyWD0t2lrKMwpgiMeNQJ5XFpeaMwuKidq3qUlrkbLEa",
	"BTFFtaqBzhapqw0pXChJzkXz1y9++/fVwSTNT5GmS8fmymsnnEKpKTJXpVRN1VztVOb0K50ehim68Ojr",
	"Gf/XeTzZsuu/6WcZ9xc7cFSY/PJo94ej+z8e/vlN0f266D0seo+L7p53AMnz/wIAAP//IgFxxXkSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
